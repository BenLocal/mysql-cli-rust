/*!
 * цЩ║шГ╜х╗║шооцХ░цНоч╗УцЮД
 *
 * хоЪф╣ЙшбехЕих╗║шоочЪДцХ░цНоч╗УцЮДхТМхИЖч▒╗ч│╗ч╗Я
 */

/// цЩ║шГ╜цПРчд║х╗║шоощб╣
#[derive(Clone, Debug)]
pub struct Suggestion {
    /// шбехЕицЦЗцЬм
    pub text: String,
    /// цППш┐░ф┐бцБп
    pub description: String,
    /// х╗║шоохИЖч▒╗
    pub category: SuggestionCategory,
    /// чЫ╕хЕ│цАзшпДхИЖ (0-100)
    pub relevance: u8,
}

/// х╗║шоохИЖч▒╗цЮЪф╕╛
#[derive(Clone, Debug, PartialEq)]
pub enum SuggestionCategory {
    /// цХ░цНох║У
    Database,
    /// шби
    Table,
    /// хИЧ/хнЧцо╡
    Column,
    /// SQLхЕ│щФохнЧ
    SqlKeyword,
    /// хЗ╜цХ░
    Function,
    /// хС╜ф╗д
    Command,
}

impl Suggestion {
    /// хИЫх╗║цЦ░чЪДх╗║шоощб╣
    pub fn new(
        text: String,
        description: String,
        category: SuggestionCategory,
        relevance: u8,
    ) -> Self {
        Self {
            text,
            description,
            category,
            relevance: relevance.min(100), // чбоф┐Эф╕Нш╢Еш┐З100
        }
    }

    /// ца╝х╝ПхМЦцШ╛чд║цЦЗцЬмя╝Их╕ж emoji хЫ╛цаЗя╝Й
    pub fn format_display(&self) -> String {
        let icon = self.category.icon();
        format!("{} {} - {}", icon, self.text, self.description)
    }

    /// хИЫх╗║цХ░цНох║Ух╗║шоо
    pub fn database(name: String, relevance: u8) -> Self {
        Self::new(
            format!("`{}`", name),
            format!("цХ░цНох║У: {}", name),
            SuggestionCategory::Database,
            relevance,
        )
    }

    /// хИЫх╗║шбих╗║шоо
    pub fn table(name: String, database: &str, relevance: u8) -> Self {
        Self::new(
            format!("`{}`", name),
            format!("шби: {} (хЬи {} цХ░цНох║У)", name, database),
            SuggestionCategory::Table,
            relevance,
        )
    }

    /// хИЫх╗║хИЧх╗║шоо
    pub fn column(name: String, table: &str, relevance: u8) -> Self {
        Self::new(
            format!("`{}`", name),
            format!("хИЧ: {} (цЭешЗкшби {})", name, table),
            SuggestionCategory::Column,
            relevance,
        )
    }

    /// хИЫх╗║SQLхЕ│щФохнЧх╗║шоо
    pub fn sql_keyword(keyword: String, description: String, relevance: u8) -> Self {
        Self::new(
            keyword,
            description,
            SuggestionCategory::SqlKeyword,
            relevance,
        )
    }

    /// хИЫх╗║хЗ╜цХ░х╗║шоо
    pub fn function(name: String, description: String, relevance: u8) -> Self {
        Self::new(name, description, SuggestionCategory::Function, relevance)
    }

    /// хИЫх╗║хС╜ф╗дх╗║шоо
    pub fn command(command: String, description: String, relevance: u8) -> Self {
        Self::new(command, description, SuggestionCategory::Command, relevance)
    }
}

impl SuggestionCategory {
    /// шО╖хПЦхИЖч▒╗хп╣х║ФчЪД emoji хЫ╛цаЗ
    pub fn icon(&self) -> &'static str {
        match self {
            SuggestionCategory::Database => "ЁЯЧДя╕П",
            SuggestionCategory::Table => "ЁЯУК",
            SuggestionCategory::Column => "ЁЯУЛ",
            SuggestionCategory::SqlKeyword => "ЁЯФ╡",
            SuggestionCategory::Function => "тЪб",
            SuggestionCategory::Command => "тЪЩя╕П",
        }
    }
}
